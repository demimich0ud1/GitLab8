import java.io.PrintStream;import java.util.NoSuchElementException;/** * Defines the methods for a Stack that handles String items */public interface StringStack {	private static class Node{		String data;		Node next;				Node(String data){			this.data = data;			this.next = null;		}	}		private Node peak;	private int size;		/** public constructor for empty stack**/	public StringStack(){		peak = null;		size = 0;	}		public boolean isEmpty(){		return peak == null;	}		public void push(String item){		Node newNode = new Node(item);		newNode.next = peak;		top = newNode;		size++;	}	/**	 * remove and return the item on the top of the stack	 * @return the item on the top of the stack	 * @throws a NoSuchElementException if the stack is empty	 */	public String pop(){		if (isEmpty()){			throw new NoSuchElementException("The Stack is Empty.");		}		String data = peak.data;		peak = peak.next;		size--;		return data;	}        /**	 * return without removing the item on the top of the stack	 * @return the item on the top of the stack	 * @throws a NoSuchElementException if the stack is empty	 */	public String peek(){		if (isEmpty()){			throw new NoSuchElementException("The Stack is Empty.");		}		return peak.data;	}	/**	 * print the elements of the stack, starting from the item         * on the top,	 * to the stream given as argument. For example, 	 * to print to the standard output you need to pass System.out as	 * an argument. E.g., 	 * printStack(System.out); 	 */	public void printStack(PrintStream stream){		Node current = head;		while (current != null){			stream.println(current.data);			current = current.next;		}	} 	/**         * return the size of the stack, 0 if it is empty	 * @return the number of items currently in the stack	 */	public int size(){		return size;	}	}